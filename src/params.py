<<<<<<< HEAD




p = 115792089210356248762697446949407573530086143415290314195533631308867097853951


b=0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b
b2=41058363725152142129326129780047268409114441015993725554835256314039467401291
G=0x026b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29
G=0x046b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2964fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5

p=0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF
a=-3
b=0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B
Gx=0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296
Gy=0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5
n=0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551


p 2**192 2 64 1, p 2 224 2 96 1, p 2 256 2 224 2 192 2 96 1, p 2 384 2 128
2 96 2 32 1, and p 2 521 1


p192 = pow(2,192)-pow(2,64)-1
p = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f
x = 55066263022277343669578718895168534326250603453777594175500187360389116729240
ysquared = ((x*x*x+7) % p)
print "ysquared= %s " % ysquared
y = pow(ysquared, (p+1)/4, p)
print "y1 = %s " % y
print "y2 = %s " % (y * -1 % p)

The
following
procedure is used
to
generate
the
parameters
A and B
of
a
suitable
elliptic
curve
over
GF(p) and a
base
point
G
from a prime

p
of
bit
length
L and a
160 - bit
seed
s.
1.
Set
h = find_integer_2(s).
2.
Convert
h
to
an
integer
A.
3.
If - 3 = A * Z ^ 4
mod
p is not solvable, then
set
s = update_seed(s)
and go
to
Step
1.
4.
Compute
one
solution
Z
of - 3 = A * Z ^ 4
mod
p.
5.
Set
s = update_seed(s).
6.
Set
B = find_integer_2(s).
7.
If
B is a
square
mod
p, then
set
s = update_seed(s) and go
to
Step
6.
8.
If
4 * A ^ 3 + 27 * B ^ 2 = 0
mod
p, then
set
s = update_seed(s) and go
to
Step
1.
9.
Check
that
the
elliptic
curve
E
over
GF(p)
given
by
y ^ 2 = x ^ 3 +
A * x + B
fulfills
all
security and functional
requirements
given
in Section
3.
If
not, then
set
s = update_seed(s) and go
to
Step
1.
10.
Set
s = update_seed(s).
11.
Set
k = find_integer_2(s).
12.
Determine
the
points
Q and -Q
having
the
smallest
x - coordinate in
E(GF(p)).Randomly
select
one
of
them as point
P.
=======
#!/usr/bin/env python

from collections import namedtuple
"p, a, b, G, n, h"
p, a, b, G, n, h
p ∈ ℤ prime number which defines 𝔽p
a, b ∈ 𝔽p define y
2 = 𝑥
3 + ax + 𝑏
 𝐺 = (𝑥, 𝑦) ∈ 𝐸(Fp)
 𝑛 ∈ ℤ prime order of 𝐺
 ℎ ∈ ℤ co-factor, h = #𝐸(𝔽𝑝)/�

p = 2^256-2^224+2^192+2^96-1

p256 = 2**256-2**224+2**192+2**96-1
a = p-3
#The base point G:
xG =
0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296
yG =
0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5
the order of G, n =
0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551
p384 = 2^384 - 2^128 - 2^96 + 2^32 - 1
p41417 = 2^414 - 17

"""x^2 + y^2 = 1 + 3617x^2y^2 over Fp"""\
    """; p = 2414 􀀀 17:"""
#2^192 − 2^32 − 2^12 − 2^8 − 2^7 − 2^6 − 2^3 − 1
T = (p, a, b, G, n, h)
p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37
a, b = 0, 3
G = 03 DB4FF10E C057E9AE 26B07D02 80B7F434 1DA5D1B1 EAE06C7D
n = FFFFFFFF FFFFFFFF FFFFFFFE 26F2FC17 0F69466A 74DEFD8D
h = 01

curves = (
{'p192': [p=6277101735386680763835789423207666416083908700390324961279,
a=6277101735386680763835789423207666416083908700390324961276,
  b=0x64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1,Gx=0x188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012,
Gy=0x07192b95ffc8da78631011ed6b24cdd573f977a11e794811, n=0xffffffffffffffffffffffff99def836146bc9b1b4d22831]},

{'p224':[            p = '26959946667150639794667015087019630673557916260026308143510066298881';
            r = '26959946667150639794667015087019625940457807714424391721682722368061';
            b = ('0xb4050a850c04b3abf54132565044b0b7d7bfd8ba270b39432355ffb4');
            Gx = ('0xb70e0cbd6bb4bf7f321390b94a03c1d356c21122343280d6115c1d21');
            Gy = ('0xbd376388b5f723fb4c22dfe6cd4375a05a07476444d5819985007e34');]},
{'p256':[
            p = '115792089210356248762697446949407573530086143415290314195533631308867097853951';
            r = '115792089210356248762697446949407573529996955224135760342422259061068512044369';
            b = ('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b');
            Gx =('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296');
            Gy =('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5');]},
{'p384':[            $_p = '39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319';
            $_r = '39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643';
            $_b = ('0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef');
            $_Gx =('0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7');
            $_Gy =('0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f');
]},
{'p521':[ $_p = '6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151';
            $_r = '6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449';
            $_b =  ('0x051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00');
            $_Gx = ('0xc6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66');
            $_Gy = ('0x11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650');
]}
{'ed25519':[
       "-0x2DFC9311D490018C7338BF8688861767FF8FF5B2BEBE27548A14B235ECA6874A",
       "0x1000000000000000000000000000000014DEF9DEA2F79CD65812631A5CF5D3ED",
       "0x216936D3CD6E53FEC0A4E231FDD6DC5C692CC7609525A7B2C9562D608F25D51A",
       "0x6666666666666666666666666666666666666666666666666666666666666658",
      "0x08"
]},
{'curve25519':[]},
{'ed25519':[]}

p 2^255 - 19
A 486662
order 2^252 + 0x14def9dea2f79cd65812631a5cf5d3ed
cofactor 8
u = 0x9, v = 0x1478161944758954479102059356840998688726460613461647528896488183775558623740
-x^2 + y^2 = 1 + d*x^2*y^2

p 2^255 - 19
d 370957059346694393431380835087545651895421138798432190163887855330
85940283555
order 2^252 + 0x14def9dea2f79cd65812631a5cf5d3ed
cofactor 8
X(P) 151122213495354007725011514095885315114540126930418572060461132
83949847762202
Y(P) 463168356949264781694283940034751631413079938662562256157830336
03165251855960

u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)
(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))
    {"Curve25519", "1.3.6.1.4.1.3029.1.5.1"},
    {"Ed25519", "1.3.6.1.4.1.11591.15.1"},

class EllipticCurve:
    def __init__(self):
        self.params = namedtuple("{0} {1} {2} {3} {4} {5} {6}".format(p,a,b,Gx,Gy,n,h))

sm2 = [
    # 2**256-2**225+2**224-2**96+2**64-1
    p = 0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF,
    a = p-3,
##The base point G:
xG: 0x32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7,
yG = 0xBC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0,
n = 0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123
]